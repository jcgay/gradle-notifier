buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.1"
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
        classpath "pl.allegro.tech.build:axion-release-plugin:1.3.2"
    }
}

apply plugin: 'groovy'
apply plugin: "com.gradle.plugin-publish"
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.bmuschko.nexus'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: "pl.allegro.tech.build.axion-release"

group = 'fr.jcgay'

scmVersion {
    tag {
        prefix = 'v'
        versionSeparator = ''
        deserialize = { config, position, tagName -> if (tagName.count('.') == 1) "$tagName.0" - 'v' else tagName - 'v' }
    }
}

project.version = scmVersion.version

sourceCompatibility = 1.6
targetCompatibility = 1.6

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    compile group: 'fr.jcgay.send-notification', name: 'send-notification', version: '0.9'

    testCompile group: 'org.assertj', name: 'assertj-core', version: '1.7.1'
    testCompile(group: 'org.spockframework', name:'spock-core', version: '1.0-groovy-2.4') {
        exclude group:'org.codehaus.groovy'
    }
    testCompile group: 'com.netflix.nebula', name: 'nebula-test', version: '4.0.0'
    testCompile group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.12.1'
    testRuntime group: 'cglib', name: 'cglib-nodep', version: '3.1'
}

test {
    jvmArgs "-XX:MaxPermSize=256m"
}

release.dependsOn build

uploadArchives.doFirst {
    if (!project.properties.keySet().containsAll('nexusUsername', 'nexusPassword')) {
        throw new StopExecutionException("Nexus authentication is not correctly defined, set 'nexusUsername' and 'nexusPassword' properties")
    }
}

publishPlugins.doFirst {
    if (!project.properties.keySet().containsAll('gradle.publish.key', 'gradle.publish.secret')) {
        throw new StopExecutionException("Gradle plugin portal credentials not correctly defined, set 'gradle.publish.secret' and 'gradle.publish.secret' properties")
    }
}

task('publish', dependsOn: [uploadArchives, closeAndPromoteRepository, publishPlugins])
closeAndPromoteRepository.mustRunAfter uploadArchives
publishPlugins.mustRunAfter uploadArchives

modifyPom {
    project {
        name 'gradle-notifier'
        packaging 'jar'
        description 'A plugin to have desktop notification when a build ends'
        url 'https://github.com/jcgay/gradle-notifier'

        scm {
            connection 'scm:git:git://github.com/jcgay/gradle-notifier.git'
            developerConnection 'scm:git:git@github.com:jcgay/gradle-notifier.git'
            url 'https://github.com/jcgay/gradle-notifier.git'
        }

        licenses {
            license {
                name 'The MIT License'
                url 'http://opensource.org/licenses/MIT'
            }
        }

        developers {
            developer {
                id 'jcgay'
                name 'Jean-Christophe Gay'
                email 'contact@jeanchristophegay.com'
            }
        }
    }
}

pluginBundle {
    website = 'https://github.com/jcgay/gradle-notifier'
    vcsUrl = 'https://github.com/jcgay/gradle-notifier'
    description = 'A plugin to have desktop notification when a build ends'
    tags = ['notification', 'desktop', 'growl', 'snarl', 'notification center', 'anybar', 'notify-send', 'pushbullet', 'toaster']

    plugins {
        gradleNotifierPlugin {
            id = 'fr.jcgay.gradle-notifier'
            displayName = 'Gradle Notifier'
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
